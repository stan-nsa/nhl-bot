from aiogram import types, Dispatcher
from create_bot import dp, bot
from db import db

async def command_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n"
                        "–Ø NHL-–±–æ—Ç!\n\n"
                        "–ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ —Å—Å—ã–ª–∫–µ: @NHL_nsa_bot –∏ –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è!\n"
                        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:\n"
                        "/scores - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –º–∞—Ç—á–µ–π\n"
                        "/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π\n"
                        "/standings - –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞\n"
                        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n"
                        "/stats_teams - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥\n"
                        "/teams - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n", \
                        parse_mode="HTML")


async def command_set(message: types.Message):
    db.insert_user(message.from_user)
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user['first_name']}!\n–ó–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ç—ã –±–æ–ª–µ–µ—à—å?", parse_mode="HTML", reply_markup=keyboards.init_kb_user_settings())


async def command_favorites(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –±–æ–ª–µ–µ—à—å:", reply_markup=keyboards.init_kb_user_favorites_teams(message.from_user))


async def command_followed(message: types.Message):
    await message.reply(f"–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—à—å —Å–ª–µ–¥–∏—Ç—å:", reply_markup=keyboards.init_kb_followed_teams(message.from_user))


#@dp.callback_query_handler(Text(startswith='favorites_'))
async def favorites(callback : types.CallbackQuery):
    team = callback.data.split('_')[1]
    user = callback.from_user
    db.insert_favorites(user, team)
    await callback.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team.split(':')[1]}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)


#@dp.callback_query_handler(Text(startswith='followed_'))
async def followed(callback : types.CallbackQuery):
    team = callback.data.split('_')[1]
    user = callback.from_user
    db.insert_favorites(user, team, 'followed')
    await callback.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team.split(':')[1]}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –°–ª–µ–∂–µ–Ω–∏—è!", show_alert=True)


async def command_test(message: types.Message):
    # await message.reply('<tg-spoiler><a href="https://ya.ru">CARüèíPIT</a></tg-spoiler>', parse_mode="HTML")
    # await message.reply('<pre>PRE <b>pre</b> üèí pre</pre>', parse_mode="HTML")
    # await message.reply('<code>CODE <b>code</b> code</code>', parse_mode="HTML")
    await message.reply("Reports:\n\n<b><a href='https://www.nhl.com/scores/htmlreports/20232024/GS020222.HTM'>Game Summary</a></b>", parse_mode="HTML")

    #await bot.send_message(message.from_user.id, 'test')
    #await message.delete()



# @dp.message_handler()
# async def echo(message: types.Message):
#     #print(message.text)
#     #await message.answer(message.text)
#     #await message.answer(message.text, parse_mode='HTML')
#     #await message.answer(message.text, parse_mode='MarkdownV2')
#     await message.answer(message.text)
#     await message.answer(message.md_text)
#     await message.answer(message.html_text)
#     # –î–æ–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
#     await message.answer(f'<u>–í–∞—à —Ç–µ–∫—Å—Ç</u>:\n\n{message.html_text}', parse_mode='HTML')


def register_handlers_other(dp : Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(command_test, commands=['test'])
